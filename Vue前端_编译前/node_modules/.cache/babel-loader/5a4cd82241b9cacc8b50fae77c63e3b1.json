{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VAutocomplete.css\"; // Components\n\nimport { genItem, makeSelectProps } from \"../VSelect/VSelect.mjs\";\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VList, VListItem } from \"../VList/index.mjs\";\nimport { VMenu } from \"../VMenu/index.mjs\";\nimport { VTextField } from \"../VTextField/index.mjs\"; // Composables\n\nimport { makeFilterProps, useFilter } from \"../../composables/filter.mjs\";\nimport { makeTransitionProps } from \"../../composables/transition.mjs\";\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, nextTick, ref, watch } from 'vue';\nimport { genericComponent, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nfunction highlightResult(text, matches, length) {\n  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented');\n  return typeof matches === 'number' && ~matches ? _createVNode(_Fragment, null, [_createVNode(\"span\", {\n    \"class\": \"v-autocomplete__unmask\"\n  }, [text.substr(0, matches)]), _createVNode(\"span\", {\n    \"class\": \"v-autocomplete__mask\"\n  }, [text.substr(matches, length)]), _createVNode(\"span\", {\n    \"class\": \"v-autocomplete__unmask\"\n  }, [text.substr(matches + length)])]) : text;\n}\n\nexport const VAutocomplete = genericComponent()({\n  name: 'VAutocomplete',\n  props: {\n    // TODO: implement post keyboard support\n    // autoSelectFirst: Boolean,\n    search: String,\n    ...makeFilterProps({\n      filterKeys: ['title']\n    }),\n    ...makeSelectProps(),\n    ...makeTransitionProps({\n      transition: false\n    })\n  },\n  emits: {\n    'click:clear': e => true,\n    'update:search': val => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const vTextFieldRef = ref();\n    const activator = ref();\n    const isFocused = ref(false);\n    const isPristine = ref(true);\n    const menu = ref(false);\n    const items = computed(() => props.items.map(genItem));\n    const search = useProxiedModel(props, 'search', '');\n    const model = useProxiedModel(props, 'modelValue', [], v => wrapInArray(v || []), v => props.multiple ? v : v[0]);\n    const {\n      filteredItems\n    } = useFilter(props, items, computed(() => isPristine.value ? undefined : search.value));\n    const selections = computed(() => {\n      const array = [];\n      let index = 0;\n\n      for (const unwrapped of model.value) {\n        const item = genItem(unwrapped);\n        const found = array.find(selection => selection.value === item.value);\n\n        if (found == null) {\n          array.push({ ...item,\n            index\n          });\n          index++;\n        }\n      }\n\n      return array;\n    });\n    const selected = computed(() => selections.value.map(selection => selection.value));\n\n    function onClear(e) {\n      model.value = [];\n\n      if (props.openOnClear) {\n        menu.value = true;\n      }\n\n      search.value = '';\n    }\n\n    function onClickControl() {\n      if (props.hideNoData && !filteredItems.value.length) return;\n      menu.value = true;\n    }\n\n    function onKeydown(e) {\n      if (['Enter', 'ArrowDown'].includes(e.key)) {\n        menu.value = true;\n      }\n\n      if (['Escape'].includes(e.key)) {\n        menu.value = false;\n      }\n\n      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {\n        isPristine.value = true;\n      }\n    }\n\n    function onAfterLeave() {\n      if (isFocused.value) isPristine.value = true;\n    }\n\n    const isSelecting = ref(false);\n\n    function select(item) {\n      if (props.multiple) {\n        const index = selections.value.findIndex(selection => selection.value === item.value);\n\n        if (index === -1) {\n          model.value.push(item.value);\n        } else {\n          model.value = selected.value.filter(selection => selection !== item.value);\n        }\n      } else {\n        model.value = [item.value];\n        isSelecting.value = true;\n        search.value = item.title;\n        menu.value = false;\n        isPristine.value = true;\n        nextTick(() => isSelecting.value = false);\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control');\n    });\n    watch(isFocused, val => {\n      if (val) {\n        var _model$value;\n\n        isSelecting.value = true;\n        search.value = props.multiple ? '' : String((_model$value = model.value) != null ? _model$value : '');\n        isPristine.value = true;\n        nextTick(() => isSelecting.value = false);\n      } else {\n        menu.value = false;\n        search.value = '';\n      }\n    });\n    watch(search, val => {\n      if (!isFocused.value || isSelecting.value) return;\n      if (val) menu.value = true;\n      isPristine.value = !val;\n    });\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip);\n      return _createVNode(VTextField, {\n        \"ref\": vTextFieldRef,\n        \"modelValue\": search.value,\n        \"onUpdate:modelValue\": $event => search.value = $event,\n        \"class\": ['v-autocomplete', {\n          'v-autocomplete--active-menu': menu.value,\n          'v-autocomplete--chips': !!props.chips,\n          [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true\n        }],\n        \"appendInnerIcon\": props.menuIcon,\n        \"dirty\": selected.value.length > 0,\n        \"onClick:clear\": onClear,\n        \"onClick:control\": onClickControl,\n        \"onClick:input\": onClickControl,\n        \"onFocus\": () => isFocused.value = true,\n        \"onBlur\": () => isFocused.value = false,\n        \"onKeydown\": onKeydown\n      }, { ...slots,\n        default: () => _createVNode(_Fragment, null, [activator.value && _createVNode(VMenu, {\n          \"modelValue\": menu.value,\n          \"onUpdate:modelValue\": $event => menu.value = $event,\n          \"activator\": activator.value,\n          \"contentClass\": \"v-autocomplete__content\",\n          \"eager\": props.eager,\n          \"openOnClick\": false,\n          \"transition\": props.transition,\n          \"onAfterLeave\": onAfterLeave\n        }, {\n          default: () => [_createVNode(VList, {\n            \"selected\": selected.value,\n            \"selectStrategy\": props.multiple ? 'independent' : 'single-independent'\n          }, {\n            default: () => [!filteredItems.value.length && !props.hideNoData && _createVNode(VListItem, {\n              \"title\": t(props.noDataText)\n            }, null), filteredItems.value.map(_ref2 => {\n              let {\n                item,\n                matches\n              } = _ref2;\n              return _createVNode(VListItem, {\n                \"value\": item.value,\n                \"onMousedown\": e => e.preventDefault(),\n                \"onClick\": () => select(item)\n              }, {\n                title: () => {\n                  var _search$value$length, _search$value;\n\n                  return isPristine.value ? item.title : highlightResult(item.title, matches.title, (_search$value$length = (_search$value = search.value) == null ? void 0 : _search$value.length) != null ? _search$value$length : 0);\n                }\n              });\n            })]\n          })]\n        }), selections.value.map((selection, index) => {\n          function onChipClose(e) {\n            e.stopPropagation();\n            e.preventDefault();\n            select(selection);\n          }\n\n          const slotProps = {\n            'onClick:close': onChipClose,\n            modelValue: true\n          };\n          return _createVNode(\"div\", {\n            \"class\": \"v-autocomplete__selection\"\n          }, [hasChips && _createVNode(VDefaultsProvider, {\n            \"defaults\": {\n              VChip: {\n                closable: props.closableChips,\n                size: 'small',\n                text: selection.title\n              }\n            }\n          }, {\n            default: () => [slots.chip ? slots.chip({\n              props: slotProps,\n              selection\n            }) : _createVNode(VChip, slotProps, null)]\n          }), !hasChips && (slots.selection ? slots.selection({\n            selection\n          }) : _createVNode(\"span\", {\n            \"class\": \"v-autocomplete__selection-text\"\n          }, [selection.title, props.multiple && index < selections.value.length - 1 && _createVNode(\"span\", {\n            \"class\": \"v-autocomplete__selection-comma\"\n          }, [_createTextVNode(\",\")])]))]);\n        })])\n      });\n    });\n    return useForwardRef({\n      filteredItems\n    }, vTextFieldRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["genItem","makeSelectProps","VChip","VDefaultsProvider","VList","VListItem","VMenu","VTextField","makeFilterProps","useFilter","makeTransitionProps","useForwardRef","useLocale","useProxiedModel","computed","nextTick","ref","watch","genericComponent","useRender","wrapInArray","highlightResult","text","matches","length","Array","isArray","Error","substr","VAutocomplete","name","props","search","String","filterKeys","transition","emits","e","val","setup","slots","_ref","t","vTextFieldRef","activator","isFocused","isPristine","menu","items","map","model","v","multiple","filteredItems","value","undefined","selections","array","index","unwrapped","item","found","find","selection","push","selected","onClear","openOnClear","onClickControl","hideNoData","onKeydown","includes","key","onAfterLeave","isSelecting","select","findIndex","filter","title","$el","querySelector","hasChips","chips","chip","$event","menuIcon","default","eager","noDataText","_ref2","preventDefault","_search$value","onChipClose","stopPropagation","slotProps","modelValue","closable","closableChips","size"],"sources":["../../../src/components/VAutocomplete/VAutocomplete.tsx"],"sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Components\nimport { genItem, makeSelectProps } from '@/components/VSelect/VSelect'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeFilterProps, useFilter } from '@/composables/filter'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, nextTick, ref, watch } from 'vue'\nimport { genericComponent, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { FilterMatch } from '@/composables/filter'\nimport type { DefaultChipSlot, InternalSelectItem } from '@/components/VSelect/VSelect'\nimport type { MakeSlots } from '@/util'\n\nexport interface InternalAutocompleteItem extends InternalSelectItem {\n\n}\n\nexport interface DefaultAutocompleteSlot {\n  selection: InternalAutocompleteItem\n}\n\nfunction highlightResult (text: string, matches: FilterMatch, length: number) {\n  if (Array.isArray(matches)) throw new Error('Multiple matches is not implemented')\n\n  return typeof matches === 'number' && ~matches\n    ? (\n      <>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(0, matches) }</span>\n        <span class=\"v-autocomplete__mask\">{ text.substr(matches, length) }</span>\n        <span class=\"v-autocomplete__unmask\">{ text.substr(matches + length) }</span>\n      </>\n    )\n    : text\n}\n\nexport const VAutocomplete = genericComponent<new <T>() => {\n  $slots: MakeSlots<{\n    chip: [DefaultChipSlot]\n    default: []\n    selection: [DefaultAutocompleteSlot]\n  }>\n}>()({\n  name: 'VAutocomplete',\n\n  props: {\n    // TODO: implement post keyboard support\n    // autoSelectFirst: Boolean,\n    search: String,\n\n    ...makeFilterProps({ filterKeys: ['title'] }),\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: false }),\n  },\n\n  emits: {\n    'click:clear': (e: MouseEvent) => true,\n    'update:search': (val: any) => true,\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const activator = ref()\n    const isFocused = ref(false)\n    const isPristine = ref(true)\n    const menu = ref(false)\n    const items = computed(() => props.items.map(genItem))\n    const search = useProxiedModel(props, 'search', '')\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => wrapInArray(v || []),\n      (v: any) => props.multiple ? v : v[0]\n    )\n    const { filteredItems } = useFilter(props, items, computed(() => isPristine.value ? undefined : search.value))\n    const selections = computed(() => {\n      const array: InternalSelectItem[] = []\n      let index = 0\n      for (const unwrapped of model.value) {\n        const item = genItem(unwrapped)\n\n        const found = array.find(selection => selection.value === item.value)\n\n        if (found == null) {\n          array.push({\n            ...item,\n            index,\n          })\n\n          index++\n        }\n      }\n\n      return array\n    })\n    const selected = computed(() => selections.value.map(selection => selection.value))\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n\n      search.value = ''\n    }\n    function onClickControl () {\n      if (props.hideNoData && !filteredItems.value.length) return\n\n      menu.value = true\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (['Enter', 'ArrowDown'].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (['Enter', 'Escape', 'Tab'].includes(e.key)) {\n        isPristine.value = true\n      }\n    }\n    function onAfterLeave () {\n      if (isFocused.value) isPristine.value = true\n    }\n    const isSelecting = ref(false)\n    function select (item: any) {\n      if (props.multiple) {\n        const index = selections.value.findIndex(selection => selection.value === item.value)\n\n        if (index === -1) {\n          model.value.push(item.value)\n        } else {\n          model.value = selected.value.filter(selection => selection !== item.value)\n        }\n      } else {\n        model.value = [item.value]\n\n        isSelecting.value = true\n\n        search.value = item.title\n        menu.value = false\n        isPristine.value = true\n\n        nextTick(() => (isSelecting.value = false))\n      }\n    }\n\n    watch(() => vTextFieldRef.value, val => {\n      activator.value = val.$el.querySelector('.v-input__control')\n    })\n\n    watch(isFocused, val => {\n      if (val) {\n        isSelecting.value = true\n        search.value = props.multiple ? '' : String(model.value ?? '')\n        isPristine.value = true\n\n        nextTick(() => isSelecting.value = false)\n      } else {\n        menu.value = false\n        search.value = ''\n      }\n    })\n\n    watch(search, val => {\n      if (!isFocused.value || isSelecting.value) return\n\n      if (val) menu.value = true\n\n      isPristine.value = !val\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          v-model={ search.value }\n          class={[\n            'v-autocomplete',\n            {\n              'v-autocomplete--active-menu': menu.value,\n              'v-autocomplete--chips': !!props.chips,\n              [`v-autocomplete--${props.multiple ? 'multiple' : 'single'}`]: true,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          dirty={ selected.value.length > 0 }\n          onClick:clear={ onClear }\n          onClick:control={ onClickControl }\n          onClick:input={ onClickControl }\n          onFocus={ () => isFocused.value = true }\n          onBlur={ () => isFocused.value = false }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                { activator.value && (\n                  <VMenu\n                    v-model={ menu.value }\n                    activator={ activator.value }\n                    contentClass=\"v-autocomplete__content\"\n                    eager={ props.eager }\n                    openOnClick={ false }\n                    transition={ props.transition }\n                    onAfterLeave={ onAfterLeave }\n                  >\n                    <VList\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    >\n                      { !filteredItems.value.length && !props.hideNoData && (\n                        <VListItem title={ t(props.noDataText) } />\n                      ) }\n\n                      { filteredItems.value.map(({ item, matches }) => (\n                        <VListItem\n                          value={ item.value }\n                          onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                          onClick={ () => select(item) }\n                        >\n                          {{\n                            title: () => {\n                              return isPristine.value\n                                ? item.title\n                                : highlightResult(item.title, matches.title, search.value?.length ?? 0)\n                            },\n                          }}\n                        </VListItem>\n                      )) }\n                    </VList>\n                  </VMenu>\n                ) }\n                  { selections.value.map((selection, index) => {\n                    function onChipClose (e: Event) {\n                      e.stopPropagation()\n                      e.preventDefault()\n\n                      select(selection)\n                    }\n\n                    const slotProps = {\n                      'onClick:close': onChipClose,\n                      modelValue: true,\n                    }\n\n                    return (\n                      <div class=\"v-autocomplete__selection\">\n                        { hasChips && (\n                          <VDefaultsProvider\n                            defaults={{\n                              VChip: {\n                                closable: props.closableChips,\n                                size: 'small',\n                                text: selection.title,\n                              },\n                            }}\n                          >\n                            { slots.chip\n                              ? slots.chip({ props: slotProps, selection })\n                              : (<VChip { ...slotProps } />)\n                            }\n                          </VDefaultsProvider>\n                        ) }\n\n                        { !hasChips && (\n                          slots.selection\n                            ? slots.selection({ selection })\n                            : (\n                              <span class=\"v-autocomplete__selection-text\">\n                                { selection.title }\n                                { props.multiple && (index < selections.value.length - 1) && (\n                                  <span class=\"v-autocomplete__selection-comma\">,</span>\n                                ) }\n                              </span>\n                            )\n                        ) }\n                      </div>\n                    )\n                  }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return useForwardRef({\n      filteredItems,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VAutocomplete = InstanceType<typeof VAutocomplete>\n"]},"metadata":{},"sourceType":"module"}