{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode, mergeProps as _mergeProps, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VFileInput.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { VChip } from \"../VChip/index.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\"; // Composables\n\nimport { useForwardRef } from \"../../composables/forwardRef.mjs\";\nimport { useLocale } from \"../../composables/locale.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, nextTick, ref } from 'vue';\nimport { defineComponent, filterInputAttrs, humanReadableFileSize, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nexport const VFileInput = defineComponent({\n  name: 'VFileInput',\n  inheritAttrs: false,\n  props: {\n    chips: Boolean,\n    counter: Boolean,\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize'\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter'\n    },\n    multiple: Boolean,\n    hint: String,\n    persistentHint: Boolean,\n    placeholder: String,\n    showSize: {\n      type: [Boolean, Number],\n      default: false,\n      validator: v => {\n        return typeof v === 'boolean' || [1000, 1024].includes(v);\n      }\n    },\n    ...makeVInputProps(),\n    prependIcon: {\n      type: String,\n      default: '$file'\n    },\n    modelValue: {\n      type: Array,\n      default: () => [],\n      validator: val => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object');\n      }\n    },\n    ...makeVFieldProps({\n      clearable: true\n    })\n  },\n  emits: {\n    'click:clear': e => true,\n    'click:control': e => true,\n    'update:modelValue': files => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      t\n    } = useLocale();\n    const model = useProxiedModel(props, 'modelValue');\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined);\n    const totalBytes = computed(() => {\n      var _model$value;\n\n      return ((_model$value = model.value) != null ? _model$value : []).reduce((bytes, _ref2) => {\n        let {\n          size = 0\n        } = _ref2;\n        return bytes + size;\n      }, 0);\n    });\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value));\n    const fileNames = computed(() => {\n      var _model$value2;\n\n      return ((_model$value2 = model.value) != null ? _model$value2 : []).map(file => {\n        const {\n          name = '',\n          size = 0\n        } = file;\n        return !props.showSize ? name : `${name} (${humanReadableFileSize(size, base.value)})`;\n      });\n    });\n    const counterValue = computed(() => {\n      var _model$value$length, _model$value3;\n\n      const fileCount = (_model$value$length = (_model$value3 = model.value) == null ? void 0 : _model$value3.length) != null ? _model$value$length : 0;\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value);else return t(props.counterString, fileCount);\n    });\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const isFocused = ref(false);\n    const inputRef = ref();\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : props.persistentHint ? props.hint : '';\n    });\n\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        var _inputRef$value;\n\n        (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();\n      }\n\n      if (!isFocused.value) {\n        isFocused.value = true;\n      }\n    }\n\n    function onControlClick(e) {\n      var _inputRef$value2;\n\n      (_inputRef$value2 = inputRef.value) == null ? void 0 : _inputRef$value2.click();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = [];\n\n        if (inputRef != null && inputRef.value) {\n          inputRef.value.value = '';\n        }\n\n        emit('click:clear', e);\n      });\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || counterValue.value);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": \"v-file-input\"\n      }, rootAttrs, inputProps, {\n        \"onClick:prepend\": onControlClick,\n        \"messages\": messages.value\n      }), { ...slots,\n        default: _ref3 => {\n          let {\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref3;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"prepend-icon\": props.prependIcon,\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear\n          }, fieldProps, {\n            \"active\": isDirty.value || isFocused.value,\n            \"dirty\": isDirty.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref4 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref4;\n              return _createVNode(_Fragment, null, [_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"type\": \"file\",\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"multiple\": props.multiple,\n                \"name\": props.name,\n                \"onClick\": e => {\n                  e.stopPropagation();\n                  onFocus();\n                },\n                \"onChange\": e => {\n                  var _target$files;\n\n                  if (!e.target) return;\n                  const target = e.target;\n                  model.value = [...((_target$files = target.files) != null ? _target$files : [])];\n                },\n                \"onFocus\": onFocus,\n                \"onBlur\": () => isFocused.value = false\n              }, slotProps, inputAttrs), null), model.value.length > 0 && _createVNode(\"div\", {\n                \"class\": fieldClass\n              }, [slots.selection ? slots.selection({\n                fileNames: fileNames.value,\n                totalBytes: totalBytes.value,\n                totalBytesReadable: totalBytesReadable.value\n              }) : props.chips ? fileNames.value.map(text => _createVNode(VChip, {\n                \"key\": text,\n                \"size\": \"small\",\n                \"color\": props.color\n              }, {\n                default: () => [text]\n              })) : fileNames.value.join(', ')])]);\n            }\n          });\n        },\n        details: hasCounter ? () => _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"value\": counterValue.value\n        }, slots.counter)]) : undefined\n      });\n    });\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","VChip","VCounter","VField","useForwardRef","useLocale","useProxiedModel","computed","nextTick","ref","defineComponent","filterInputAttrs","humanReadableFileSize","useRender","wrapInArray","filterInputProps","makeVInputProps","VInput","VFileInput","name","inheritAttrs","props","chips","Boolean","counter","counterSizeString","type","String","default","counterString","multiple","hint","persistentHint","placeholder","showSize","Number","validator","v","includes","prependIcon","modelValue","Array","val","every","clearable","emits","e","files","setup","attrs","emit","slots","_ref","t","model","base","undefined","totalBytes","value","reduce","bytes","size","_ref2","totalBytesReadable","fileNames","map","file","counterValue","fileCount","_model$value3","length","vInputRef","vFieldRef","isFocused","inputRef","messages","onFocus","document","activeElement","focus","onControlClick","click","onClear","stopPropagation","hasCounter","rootAttrs","inputAttrs","_","inputProps","fieldProps","$event","_ref3","isDisabled","isDirty","isReadonly","isValid","_ref4","class","fieldClass","slotProps","target","selection","text","color","join","details"],"sources":["../../../src/components/VFileInput/VFileInput.tsx"],"sourcesContent":["// Styles\nimport './VFileInput.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { VChip } from '@/components/VChip'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Composables\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, ref } from 'vue'\nimport { defineComponent, filterInputAttrs, humanReadableFileSize, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\n\nexport const VFileInput = defineComponent({\n  name: 'VFileInput',\n\n  inheritAttrs: false,\n\n  props: {\n    chips: Boolean,\n    counter: Boolean,\n    counterSizeString: {\n      type: String,\n      default: '$vuetify.fileInput.counterSize',\n    },\n    counterString: {\n      type: String,\n      default: '$vuetify.fileInput.counter',\n    },\n    multiple: Boolean,\n    hint: String,\n    persistentHint: Boolean,\n    placeholder: String,\n    showSize: {\n      type: [Boolean, Number] as PropType<boolean | 1000 | 1024>,\n      default: false,\n      validator: (v: boolean | number) => {\n        return (\n          typeof v === 'boolean' ||\n          [1000, 1024].includes(v)\n        )\n      },\n    },\n\n    ...makeVInputProps(),\n\n    prependIcon: {\n      type: String,\n      default: '$file',\n    },\n    modelValue: {\n      type: Array as PropType<File[]>,\n      default: () => ([]),\n      validator: (val: any) => {\n        return wrapInArray(val).every(v => v != null && typeof v === 'object')\n      },\n    },\n\n    ...makeVFieldProps({ clearable: true }),\n  },\n\n  emits: {\n    'click:clear': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'update:modelValue': (files: File[]) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const model = useProxiedModel(props, 'modelValue')\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined)\n    const totalBytes = computed(() => (model.value ?? []).reduce((bytes, { size = 0 }) => bytes + size, 0))\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value))\n\n    const fileNames = computed(() => (model.value ?? []).map(file => {\n      const { name = '', size = 0 } = file\n\n      return !props.showSize\n        ? name\n        : `${name} (${humanReadableFileSize(size, base.value)})`\n    }))\n\n    const counterValue = computed(() => {\n      const fileCount = model.value?.length ?? 0\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value)\n      else return t(props.counterString, fileCount)\n    })\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) {\n        isFocused.value = true\n      }\n    }\n    function onControlClick (e: MouseEvent) {\n      inputRef.value?.click()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = []\n\n        if (inputRef?.value) {\n          inputRef.value.value = ''\n        }\n\n        emit('click:clear', e)\n      })\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || counterValue.value)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class=\"v-file-input\"\n          { ...rootAttrs }\n          { ...inputProps }\n          onClick:prepend={ onControlClick }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                prepend-icon={ props.prependIcon }\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                { ...fieldProps }\n                active={ isDirty.value || isFocused.value }\n                dirty={ isDirty.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      <input\n                        ref={ inputRef }\n                        type=\"file\"\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        multiple={ props.multiple }\n                        name={ props.name }\n                        onClick={ e => {\n                          e.stopPropagation()\n\n                          onFocus()\n                        } }\n                        onChange={ e => {\n                          if (!e.target) return\n\n                          const target = e.target as HTMLInputElement\n                          model.value = [...target.files ?? []]\n                        } }\n                        onFocus={ onFocus }\n                        onBlur={ () => (isFocused.value = false) }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { model.value.length > 0 && (\n                        <div class={ fieldClass }>\n                          { slots.selection ? slots.selection({\n                            fileNames: fileNames.value,\n                            totalBytes: totalBytes.value,\n                            totalBytesReadable: totalBytesReadable.value,\n                          })\n                          : props.chips ? fileNames.value.map(text => (\n                            <VChip\n                              key={ text }\n                              size=\"small\"\n                              color={ props.color }\n                            >{ text }</VChip>\n                          ))\n                          : fileNames.value.join(', ') }\n                        </div>\n                      ) }\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  value={ counterValue.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VFileInput = InstanceType<typeof VFileInput>\n"]},"metadata":{},"sourceType":"module"}