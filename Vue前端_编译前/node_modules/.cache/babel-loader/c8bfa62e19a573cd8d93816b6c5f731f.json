{"ast":null,"code":"import { computed, effectScope, onScopeDispose, ref, toRaw, watch } from 'vue';\nimport { getCurrentInstance } from \"../util/index.mjs\"; // Types\n\nconst stack = ref([]);\nexport function useStack(isActive) {\n  const vm = getCurrentInstance('useStack');\n  let scope;\n  watch(isActive, val => {\n    if (val) {\n      scope = effectScope();\n      scope.run(() => {\n        stack.value.push(vm);\n        onScopeDispose(() => {\n          const idx = stack.value.indexOf(vm);\n          stack.value.splice(idx, 1);\n        });\n      });\n    } else {\n      var _scope;\n\n      (_scope = scope) == null ? void 0 : _scope.stop();\n    }\n  }, {\n    immediate: true\n  });\n  const isTop = computed(() => {\n    return toRaw(stack.value[stack.value.length - 1]) === vm;\n  });\n  return {\n    isTop\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,cAAhC,EAAgDC,GAAhD,EAAqDC,KAArD,EAA4DC,KAA5D,QAAyE,KAAzE;SACSC,0B,qBAET;;AAGA,MAAMC,KAAK,GAAGJ,GAAG,CAA8B,EAA9B,CAAjB;AAEA,OAAO,SAASK,QAAT,CAAmBC,QAAnB,EAA2C;AAChD,QAAMC,EAAE,GAAGJ,kBAAkB,CAAC,UAAD,CAA7B;AACA,MAAIK,KAAJ;AACAN,OAAK,CAACI,QAAD,EAAWG,GAAG,IAAI;AACrB,QAAIA,GAAJ,EAAS;AACPD,WAAK,GAAGV,WAAW,EAAnBU;AACAA,WAAK,CAACE,GAANF,CAAU,MAAM;AACdJ,aAAK,CAACO,KAANP,CAAYQ,IAAZR,CAAiBG,EAAjBH;AAEAL,sBAAc,CAAC,MAAM;AACnB,gBAAMc,GAAG,GAAGT,KAAK,CAACO,KAANP,CAAYU,OAAZV,CAAoBG,EAApBH,CAAZ;AACAA,eAAK,CAACO,KAANP,CAAYW,MAAZX,CAAmBS,GAAnBT,EAAwB,CAAxBA;AAFY,UAAdL;AAHF;AAFF,WAUO;AAAA;;AACL,0BAAK,IAAL,mBAAOiB,IAAP;AACD;AAbE,KAcF;AAAEC,aAAS,EAAE;AAAb,GAdE,CAALf;AAgBA,QAAMgB,KAAK,GAAGrB,QAAQ,CAAC,MAAM;AAC3B,WAAOI,KAAK,CAACG,KAAK,CAACO,KAANP,CAAYA,KAAK,CAACO,KAANP,CAAYe,MAAZf,GAAqB,CAAjCA,CAAD,CAALH,KAA+CM,EAAtD;AADoB,IAAtB;AAIA,SAAO;AACLW;AADK,GAAP;AAGD","names":["computed","effectScope","onScopeDispose","ref","toRaw","watch","getCurrentInstance","stack","useStack","isActive","vm","scope","val","run","value","push","idx","indexOf","splice","stop","immediate","isTop","length"],"sources":["../../src/composables/stack.ts"],"sourcesContent":["import { computed, effectScope, onScopeDispose, ref, toRaw, watch } from 'vue'\nimport { getCurrentInstance } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, EffectScope, Ref } from 'vue'\n\nconst stack = ref<ComponentInternalInstance[]>([])\n\nexport function useStack (isActive: Ref<boolean>) {\n  const vm = getCurrentInstance('useStack')\n  let scope: EffectScope | undefined\n  watch(isActive, val => {\n    if (val) {\n      scope = effectScope()\n      scope.run(() => {\n        stack.value.push(vm)\n\n        onScopeDispose(() => {\n          const idx = stack.value.indexOf(vm)\n          stack.value.splice(idx, 1)\n        })\n      })\n    } else {\n      scope?.stop()\n    }\n  }, { immediate: true })\n\n  const isTop = computed(() => {\n    return toRaw(stack.value[stack.value.length - 1]) === vm\n  })\n\n  return {\n    isTop,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}