{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSwitch.css\"; // Components\n\nimport { filterControlProps, makeSelectionControlProps, VSelectionControl } from \"../VSelectionControl/VSelectionControl.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VProgressCircular } from \"../VProgressCircular/index.mjs\"; // Composables\n\nimport { LoaderSlot, makeLoaderProps, useLoader } from \"../../composables/loader.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utility\n\nimport { computed, defineComponent, ref } from 'vue';\nimport { filterInputAttrs, useRender } from \"../../util/index.mjs\";\nexport const VSwitch = defineComponent({\n  name: 'VSwitch',\n  inheritAttrs: false,\n  props: {\n    indeterminate: Boolean,\n    inset: Boolean,\n    flat: Boolean,\n    ...makeLoaderProps(),\n    ...makeVInputProps(),\n    ...makeSelectionControlProps()\n  },\n  emits: {\n    'update:indeterminate': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const indeterminate = useProxiedModel(props, 'indeterminate');\n    const {\n      loaderClasses\n    } = useLoader(props);\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== '' ? props.loading : props.color;\n    });\n\n    function onChange() {\n      if (indeterminate.value) {\n        indeterminate.value = false;\n      }\n    }\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);\n      const [inputProps, _1] = filterInputProps(props);\n      const [controlProps, _2] = filterControlProps(props);\n      const control = ref();\n\n      function onClick() {\n        var _control$value, _control$value$input;\n\n        (_control$value = control.value) == null ? void 0 : (_control$value$input = _control$value.input) == null ? void 0 : _control$value$input.click();\n      }\n\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-switch', {\n          'v-switch--inset': props.inset\n        }, {\n          'v-switch--indeterminate': indeterminate.value\n        }, loaderClasses.value]\n      }, inputAttrs, inputProps), { ...slots,\n        default: _ref2 => {\n          let {\n            isDisabled,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VSelectionControl, _mergeProps({\n            \"ref\": control\n          }, controlProps, {\n            \"type\": \"checkbox\",\n            \"onUpdate:modelValue\": onChange,\n            \"aria-checked\": indeterminate.value ? 'mixed' : undefined,\n            \"disabled\": isDisabled.value,\n            \"readonly\": isReadonly.value\n          }, controlAttrs), {\n            default: () => _createVNode(\"div\", {\n              \"class\": \"v-switch__track\",\n              \"onClick\": onClick\n            }, null),\n            input: _ref3 => {\n              let {\n                textColorClasses\n              } = _ref3;\n              return _createVNode(\"div\", {\n                \"class\": ['v-switch__thumb', textColorClasses.value]\n              }, [props.loading && _createVNode(LoaderSlot, {\n                \"name\": \"v-switch\",\n                \"active\": true,\n                \"color\": isValid.value === false ? undefined : loaderColor.value\n              }, {\n                default: slotProps => slots.loader ? slots.loader(slotProps) : _createVNode(VProgressCircular, {\n                  \"active\": slotProps.isActive,\n                  \"color\": slotProps.color,\n                  \"indeterminate\": true,\n                  \"size\": \"16\",\n                  \"width\": \"2\"\n                }, null)\n              })]);\n            }\n          });\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterControlProps","makeSelectionControlProps","VSelectionControl","filterInputProps","makeVInputProps","VInput","VProgressCircular","LoaderSlot","makeLoaderProps","useLoader","useProxiedModel","computed","defineComponent","ref","filterInputAttrs","useRender","VSwitch","name","inheritAttrs","props","indeterminate","Boolean","inset","flat","emits","val","setup","attrs","slots","_ref","loaderClasses","loaderColor","loading","color","onChange","value","inputAttrs","controlAttrs","inputProps","_1","controlProps","_2","control","onClick","input","click","default","_ref2","isDisabled","isReadonly","isValid","undefined","_ref3","textColorClasses","slotProps","loader","isActive"],"sources":["../../../src/components/VSwitch/VSwitch.tsx"],"sourcesContent":["// Styles\nimport './VSwitch.sass'\n\n// Components\nimport { filterControlProps, makeSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { LoaderSlot, makeLoaderProps, useLoader } from '@/composables/loader'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utility\nimport { computed, defineComponent, ref } from 'vue'\nimport { filterInputAttrs, useRender } from '@/util'\n\nexport const VSwitch = defineComponent({\n  name: 'VSwitch',\n\n  inheritAttrs: false,\n\n  props: {\n    indeterminate: Boolean,\n    inset: Boolean,\n    flat: Boolean,\n\n    ...makeLoaderProps(),\n    ...makeVInputProps(),\n    ...makeSelectionControlProps(),\n  },\n\n  emits: {\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const { loaderClasses } = useLoader(props)\n\n    const loaderColor = computed(() => {\n      return typeof props.loading === 'string' && props.loading !== ''\n        ? props.loading\n        : props.color\n    })\n\n    function onChange () {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    useRender(() => {\n      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = filterInputProps(props)\n      const [controlProps, _2] = filterControlProps(props)\n      const control = ref<VSelectionControl>()\n\n      function onClick () {\n        control.value?.input?.click()\n      }\n\n      return (\n        <VInput\n          class={[\n            'v-switch',\n            { 'v-switch--inset': props.inset },\n            { 'v-switch--indeterminate': indeterminate.value },\n            loaderClasses.value,\n          ]}\n          { ...inputAttrs }\n          { ...inputProps }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isReadonly,\n              isValid,\n            }) => (\n              <VSelectionControl\n                ref={ control }\n                { ...controlProps }\n                type=\"checkbox\"\n                onUpdate:modelValue={ onChange }\n                aria-checked={ indeterminate.value ? 'mixed' : undefined }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n              >\n                {{\n                  default: () => (<div class=\"v-switch__track\" onClick={ onClick }></div>),\n                  input: ({ textColorClasses }) => (\n                    <div\n                      class={[\n                        'v-switch__thumb',\n                        textColorClasses.value,\n                      ]}\n                    >\n                      { props.loading && (\n                        <LoaderSlot\n                          name=\"v-switch\"\n                          active\n                          color={ isValid.value === false ? undefined : loaderColor.value }\n                        >\n                          { slotProps => (\n                            slots.loader\n                              ? slots.loader(slotProps)\n                              : (\n                                  <VProgressCircular\n                                    active={ slotProps.isActive }\n                                    color={ slotProps.color }\n                                    indeterminate\n                                    size=\"16\"\n                                    width=\"2\"\n                                  />\n                              )\n                          )}\n                        </LoaderSlot>\n                      ) }\n                    </div>\n                  ),\n                }}\n              </VSelectionControl>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSwitch = InstanceType<typeof VSwitch>\n"]},"metadata":{},"sourceType":"module"}