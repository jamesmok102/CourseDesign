{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VList.css\"; // Components\n\nimport { VListChildren } from \"./VListChildren.mjs\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeNestedProps, useNested } from \"../../composables/nested/nested.mjs\";\nimport { createList } from \"./list.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nconst parseItems = items => {\n  if (!items) return undefined;\n  return items.map(item => {\n    if (typeof item === 'string') return {\n      type: 'item',\n      value: item,\n      title: item\n    };\n    const {\n      $type,\n      $children,\n      ...props\n    } = item;\n    if ($type === 'subheader') return {\n      type: 'subheader',\n      props\n    };\n    if ($type === 'divider') return {\n      type: 'divider',\n      props\n    };\n    return {\n      type: 'item',\n      props,\n      children: parseItems($children)\n    };\n  });\n};\n\nexport const VList = genericComponent()({\n  name: 'VList',\n  props: {\n    color: String,\n    disabled: Boolean,\n    lines: {\n      type: String,\n      default: 'one'\n    },\n    nav: Boolean,\n    items: Array,\n    ...makeNestedProps({\n      selectStrategy: 'single-leaf',\n      openStrategy: 'multiple'\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps()\n  },\n  emits: {\n    'update:selected': val => true,\n    'update:opened': val => true,\n    'click:open': value => true,\n    'click:select': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const items = computed(() => parseItems(props.items));\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      open,\n      select\n    } = useNested(props);\n    createList();\n    useRender(() => {\n      return _createVNode(props.tag, {\n        \"class\": ['v-list', {\n          'v-list--disabled': props.disabled,\n          'v-list--nav': props.nav,\n          [`v-list--${props.lines}-line`]: true\n        }, themeClasses.value, backgroundColorClasses.value, borderClasses.value, densityClasses.value, elevationClasses.value, roundedClasses.value],\n        \"style\": [backgroundColorStyles.value, dimensionStyles.value]\n      }, {\n        default: () => [_createVNode(VListChildren, {\n          \"items\": items.value\n        }, {\n          default: slots.default,\n          item: slots.item,\n          title: slots.title,\n          subtitle: slots.subtitle,\n          header: slots.header\n        })]\n      });\n    });\n    return {\n      open,\n      select\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VListChildren","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makeRoundedProps","useRounded","makeTagProps","useBackgroundColor","makeThemeProps","provideTheme","makeNestedProps","useNested","createList","computed","toRef","genericComponent","useRender","parseItems","items","undefined","map","item","type","value","title","$type","$children","props","children","VList","name","color","String","disabled","Boolean","lines","default","nav","Array","selectStrategy","openStrategy","emits","val","setup","slots","_ref","themeClasses","backgroundColorClasses","backgroundColorStyles","borderClasses","densityClasses","dimensionStyles","elevationClasses","roundedClasses","open","select","subtitle","header"],"sources":["../../../src/components/VList/VList.tsx"],"sourcesContent":["// Styles\nimport './VList.sass'\n\n// Components\nimport { VListChildren } from './VListChildren'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeNestedProps, useNested } from '@/composables/nested/nested'\nimport { createList } from './list'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { Prop } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport type { ListGroupActivatorSlot } from './VListGroup'\n\nexport type ListItem = {\n  [key: string]: any\n  $type?: 'item' | 'subheader' | 'divider'\n  $children?: (string | ListItem)[]\n}\n\nexport type InternalListItem = {\n  type?: 'item' | 'subheader' | 'divider'\n  props?: Record<string, any>\n  children?: InternalListItem[]\n}\n\nconst parseItems = (items?: (string | ListItem)[]): InternalListItem[] | undefined => {\n  if (!items) return undefined\n\n  return items.map(item => {\n    if (typeof item === 'string') return { type: 'item', value: item, title: item }\n\n    const { $type, $children, ...props } = item\n\n    if ($type === 'subheader') return { type: 'subheader', props }\n    if ($type === 'divider') return { type: 'divider', props }\n\n    return { type: 'item', props, children: parseItems($children) }\n  })\n}\n\nexport const VList = genericComponent<new <T>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    subheader: []\n    header: [ListGroupActivatorSlot]\n    item: [T]\n  }>\n}>()({\n  name: 'VList',\n\n  props: {\n    color: String,\n    disabled: Boolean,\n    lines: {\n      type: String,\n      default: 'one',\n    },\n    nav: Boolean,\n    items: Array as Prop<ListItem[]>,\n\n    ...makeNestedProps({\n      selectStrategy: 'single-leaf' as const,\n      openStrategy: 'multiple' as const,\n    }),\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:selected': (val: string[]) => true,\n    'update:opened': (val: string[]) => true,\n    'click:open': (value: { id: string, value: boolean, path: string[] }) => true,\n    'click:select': (value: { id: string, value: boolean, path: string[] }) => true,\n  },\n\n  setup (props, { slots }) {\n    const items = computed(() => parseItems(props.items))\n    const { themeClasses } = provideTheme(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const { open, select } = useNested(props)\n\n    createList()\n\n    useRender(() => {\n      return (\n        <props.tag\n          class={[\n            'v-list',\n            {\n              'v-list--disabled': props.disabled,\n              'v-list--nav': props.nav,\n              [`v-list--${props.lines}-line`]: true,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            dimensionStyles.value,\n          ]}\n        >\n          <VListChildren items={ items.value }>\n            {{\n              default: slots.default,\n              item: slots.item,\n              title: slots.title,\n              subtitle: slots.subtitle,\n              header: slots.header,\n            }}\n          </VListChildren>\n        </props.tag>\n      )\n    })\n\n    return {\n      open,\n      select,\n    }\n  },\n})\n\nexport type VList = InstanceType<typeof VList>\n"]},"metadata":{},"sourceType":"module"}