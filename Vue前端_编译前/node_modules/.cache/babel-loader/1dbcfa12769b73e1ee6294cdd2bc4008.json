{"ast":null,"code":"import { useProxiedModel } from \"../proxiedModel.mjs\";\nimport { getCurrentInstance, getUid, propsFactory } from \"../../util/index.mjs\";\nimport { computed, inject, onBeforeUnmount, provide, ref } from 'vue';\nimport { multipleOpenStrategy, singleOpenStrategy } from \"./openStrategies.mjs\";\nimport { classicSelectStrategy, independentSelectStrategy, independentSingleSelectStrategy, leafSelectStrategy } from \"./selectStrategies.mjs\"; // Types\n\nexport const VNestedSymbol = Symbol.for('vuetify:nested');\nexport const emptyNested = {\n  id: ref(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    select: () => null,\n    opened: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([])\n  }\n};\nexport const makeNestedProps = propsFactory({\n  selectStrategy: [String, Function],\n  openStrategy: [String, Function],\n  opened: Array,\n  selected: Array,\n  mandatory: Boolean\n}, 'nested');\nexport const useNested = props => {\n  let isUnmounted = false;\n  const children = ref(new Map());\n  const parents = ref(new Map());\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()]);\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy;\n\n    switch (props.selectStrategy) {\n      case 'single-leaf':\n        return leafSelectStrategy(true);\n\n      case 'leaf':\n        return leafSelectStrategy();\n\n      case 'independent':\n        return independentSelectStrategy;\n\n      case 'single-independent':\n        return independentSingleSelectStrategy;\n\n      case 'classic':\n      default:\n        return classicSelectStrategy;\n    }\n  });\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'function') return props.openStrategy;\n\n    switch (props.openStrategy) {\n      case 'single':\n        return singleOpenStrategy;\n\n      case 'multiple':\n      default:\n        return multipleOpenStrategy;\n    }\n  });\n  const selected = useProxiedModel(props, 'selected', props.selected, v => selectStrategy.value.in(v, children.value, parents.value), v => selectStrategy.value.out(v, children.value, parents.value));\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n\n  function getPath(id) {\n    const path = [];\n    let parent = id;\n\n    while (parent != null) {\n      path.unshift(parent);\n      parent = parents.value.get(parent);\n    }\n\n    return path;\n  }\n\n  const vm = getCurrentInstance('nested');\n  const nested = {\n    id: ref(),\n    root: {\n      opened,\n      selected,\n      selectedValues: computed(() => {\n        const arr = [];\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key);\n        }\n\n        return arr;\n      }),\n      register: (id, parentId, isGroup) => {\n        parentId && id !== parentId && parents.value.set(id, parentId);\n        isGroup && children.value.set(id, []);\n\n        if (parentId != null) {\n          children.value.set(parentId, [...(children.value.get(parentId) || []), id]);\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return;\n        children.value.delete(id);\n        const parent = parents.value.get(id);\n\n        if (parent) {\n          var _children$value$get;\n\n          const list = (_children$value$get = children.value.get(parent)) != null ? _children$value$get : [];\n          children.value.set(parent, list.filter(child => child !== id));\n        }\n\n        parents.value.delete(id);\n        opened.value.delete(id);\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newOpened = openStrategy.value({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n          mandatory: props.mandatory\n        });\n        newSelected && (selected.value = newSelected);\n      },\n      children,\n      parents\n    }\n  };\n  provide(VNestedSymbol, nested);\n  return nested.root;\n};\nexport const useNestedItem = (id, isGroup) => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  const computedId = computed(() => {\n    var _id$value;\n\n    return (_id$value = id.value) != null ? _id$value : getUid().toString();\n  });\n  const item = { ...parent,\n    id: computedId,\n    open: (open, e) => parent.root.open(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    select: (selected, e) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(computedId.value) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(computedId.value) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value))\n  };\n  !parent.skipRegister && parent.root.register(computedId.value, parent.id.value, isGroup);\n  onBeforeUnmount(() => {\n    !parent.skipRegister && parent.root.unregister(computedId.value);\n  });\n  isGroup && provide(VNestedSymbol, item);\n  return item;\n};\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  provide(VNestedSymbol, { ...parent,\n    skipRegister: true\n  });\n};","map":{"version":3,"mappings":"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","names":["useProxiedModel","getCurrentInstance","getUid","propsFactory","computed","inject","onBeforeUnmount","provide","ref","multipleOpenStrategy","singleOpenStrategy","classicSelectStrategy","independentSelectStrategy","independentSingleSelectStrategy","leafSelectStrategy","VNestedSymbol","Symbol","for","emptyNested","id","root","register","unregister","parents","Map","children","open","select","opened","Set","selected","selectedValues","makeNestedProps","selectStrategy","String","Function","openStrategy","Array","mandatory","Boolean","useNested","props","isUnmounted","v","values","value","in","out","getPath","path","parent","unshift","get","vm","nested","arr","key","entries","push","parentId","isGroup","set","delete","list","filter","child","event","emit","newOpened","newSelected","useNestedItem","computedId","toString","item","e","isOpen","has","isSelected","isIndeterminate","isLeaf","skipRegister","useNestedGroupActivator"],"sources":["../../../src/composables/nested/nested.ts"],"sourcesContent":["import { useProxiedModel } from '@/composables/proxiedModel'\nimport { getCurrentInstance, getUid, propsFactory } from '@/util'\nimport { computed, inject, onBeforeUnmount, provide, ref } from 'vue'\nimport { multipleOpenStrategy, singleOpenStrategy } from './openStrategies'\nimport { classicSelectStrategy, independentSelectStrategy, independentSingleSelectStrategy, leafSelectStrategy } from './selectStrategies'\n\n// Types\nimport type { InjectionKey, Prop, Ref } from 'vue'\nimport type { SelectStrategyFn } from './selectStrategies'\nimport type { OpenStrategyFn } from './openStrategies'\n\nexport type SelectStrategy = 'single-leaf' | 'leaf' | 'independent' | 'single-independent' | 'classic' | SelectStrategyFn\nexport type OpenStrategy = 'single' | 'multiple' | OpenStrategyFn\n\nexport interface NestedProps {\n  selectStrategy: SelectStrategy | undefined\n  openStrategy: OpenStrategy | undefined\n  selected: string[] | undefined\n  opened: string[] | undefined\n  mandatory: boolean\n  'onUpdate:selected': ((val: string[]) => void) | undefined\n  'onUpdate:opened': ((val: string[]) => void) | undefined\n}\n\ntype NestedProvide = {\n  id: Ref<string | undefined>\n  skipRegister?: boolean\n  root: {\n    children: Ref<Map<string, string[]>>\n    parents: Ref<Map<string, string>>\n    opened: Ref<Set<string>>\n    selected: Ref<Map<string, 'on' | 'off' | 'indeterminate'>>\n    selectedValues: Ref<string[]>\n    register: (id: string, parentId: string | undefined, isGroup?: boolean) => void\n    unregister: (id: string) => void\n    open: (id: string, value: boolean, event?: Event) => void\n    select: (id: string, value: boolean, event?: Event) => void\n  }\n}\n\nexport const VNestedSymbol: InjectionKey<NestedProvide> = Symbol.for('vuetify:nested')\n\nexport const emptyNested: NestedProvide = {\n  id: ref(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    select: () => null,\n    opened: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([]),\n  },\n}\n\nexport const makeNestedProps = propsFactory({\n  selectStrategy: [String, Function] as Prop<SelectStrategy>,\n  openStrategy: [String, Function] as Prop<OpenStrategy>,\n  opened: Array as Prop<string[]>,\n  selected: Array as Prop<string[]>,\n  mandatory: Boolean,\n}, 'nested')\n\nexport const useNested = (props: NestedProps) => {\n  let isUnmounted = false\n  const children = ref(new Map<string, string[]>())\n  const parents = ref(new Map<string, string>())\n\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()])\n\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy\n\n    switch (props.selectStrategy) {\n      case 'single-leaf': return leafSelectStrategy(true)\n      case 'leaf': return leafSelectStrategy()\n      case 'independent': return independentSelectStrategy\n      case 'single-independent': return independentSingleSelectStrategy\n      case 'classic':\n      default: return classicSelectStrategy\n    }\n  })\n\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'function') return props.openStrategy\n\n    switch (props.openStrategy) {\n      case 'single': return singleOpenStrategy\n      case 'multiple':\n      default: return multipleOpenStrategy\n    }\n  })\n\n  const selected = useProxiedModel(\n    props,\n    'selected',\n    props.selected,\n    v => selectStrategy.value.in(v, children.value, parents.value),\n    v => selectStrategy.value.out(v, children.value, parents.value),\n  )\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function getPath (id: string) {\n    const path: string[] = []\n    let parent: string | undefined = id\n\n    while (parent != null) {\n      path.unshift(parent)\n      parent = parents.value.get(parent)\n    }\n\n    return path\n  }\n\n  const vm = getCurrentInstance('nested')\n\n  const nested: NestedProvide = {\n    id: ref(),\n    root: {\n      opened,\n      selected,\n      selectedValues: computed(() => {\n        const arr = []\n\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key)\n        }\n\n        return arr\n      }),\n      register: (id, parentId, isGroup) => {\n        parentId && id !== parentId && parents.value.set(id, parentId)\n\n        isGroup && children.value.set(id, [])\n\n        if (parentId != null) {\n          children.value.set(parentId, [...children.value.get(parentId) || [], id])\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return\n\n        children.value.delete(id)\n        const parent = parents.value.get(id)\n        if (parent) {\n          const list = children.value.get(parent) ?? []\n          children.value.set(parent, list.filter(child => child !== id))\n        }\n        parents.value.delete(id)\n        opened.value.delete(id)\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', { id, value, path: getPath(id), event })\n\n        const newOpened = openStrategy.value({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n        })\n\n        newOpened && (opened.value = newOpened)\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', { id, value, path: getPath(id), event })\n\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event,\n          mandatory: props.mandatory,\n        })\n        newSelected && (selected.value = newSelected)\n      },\n      children,\n      parents,\n    },\n  }\n\n  provide(VNestedSymbol, nested)\n\n  return nested.root\n}\n\nexport const useNestedItem = (id: Ref<string | undefined>, isGroup: boolean) => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  const computedId = computed(() => id.value ?? getUid().toString())\n\n  const item = {\n    ...parent,\n    id: computedId,\n    open: (open: boolean, e: Event) => parent.root.open(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    select: (selected: boolean, e: Event) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(computedId.value) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(computedId.value) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value)),\n  }\n\n  !parent.skipRegister && parent.root.register(computedId.value, parent.id.value, isGroup)\n\n  onBeforeUnmount(() => {\n    !parent.skipRegister && parent.root.unregister(computedId.value)\n  })\n\n  isGroup && provide(VNestedSymbol, item)\n\n  return item\n}\n\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested)\n\n  provide(VNestedSymbol, { ...parent, skipRegister: true })\n}\n"]},"metadata":{},"sourceType":"module"}