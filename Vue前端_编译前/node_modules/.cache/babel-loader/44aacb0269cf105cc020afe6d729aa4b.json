{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VProgressCircular.css\"; // Composables\n\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useTextColor } from \"../../composables/color.mjs\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.mjs\"; // Utilities\n\nimport { computed, ref, toRef, watchEffect } from 'vue';\nimport { convertToUnit, defineComponent } from \"../../util/index.mjs\"; // Types\n\nexport const VProgressCircular = defineComponent({\n  name: 'VProgressCircular',\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String],\n    modelValue: {\n      type: [Number, String],\n      default: 0\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0\n    },\n    width: {\n      type: [Number, String],\n      default: 4\n    },\n    ...makeSizeProps(),\n    ...makeTagProps({\n      tag: 'div'\n    }),\n    ...makeThemeProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const MAGIC_RADIUS_CONSTANT = 20;\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT;\n    const root = ref();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      sizeClasses,\n      sizeStyles\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const {\n      textColorClasses: underlayColorClasses,\n      textColorStyles: underlayColorStyles\n    } = useTextColor(toRef(props, 'bgColor'));\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    const {\n      resizeRef,\n      contentRect\n    } = useResizeObserver();\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))));\n    const width = computed(() => Number(props.width));\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value ? Number(props.size) : contentRect.value ? contentRect.value.width : Math.max(width.value, 32);\n    });\n    const diameter = computed(() => MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value) * 2);\n    const strokeWidth = computed(() => width.value / size.value * diameter.value);\n    const strokeDashOffset = computed(() => convertToUnit((100 - normalizedValue.value) / 100 * CIRCUMFERENCE));\n    watchEffect(() => {\n      intersectionRef.value = root.value;\n      resizeRef.value = root.value;\n    });\n    return () => _createVNode(props.tag, {\n      \"ref\": root,\n      \"class\": ['v-progress-circular', {\n        'v-progress-circular--indeterminate': !!props.indeterminate,\n        'v-progress-circular--visible': isIntersecting.value,\n        'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink'\n      }, themeClasses.value, sizeClasses.value, textColorClasses.value],\n      \"style\": [sizeStyles.value, textColorStyles.value],\n      \"role\": \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": props.indeterminate ? undefined : normalizedValue.value\n    }, {\n      default: () => [_createVNode(\"svg\", {\n        \"style\": {\n          transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`\n        },\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"viewBox\": `0 0 ${diameter.value} ${diameter.value}`\n      }, [_createVNode(\"circle\", {\n        \"class\": ['v-progress-circular__underlay', underlayColorClasses.value],\n        \"style\": underlayColorStyles.value,\n        \"fill\": \"transparent\",\n        \"cx\": \"50%\",\n        \"cy\": \"50%\",\n        \"r\": MAGIC_RADIUS_CONSTANT,\n        \"stroke-width\": strokeWidth.value,\n        \"stroke-dasharray\": CIRCUMFERENCE,\n        \"stroke-dashoffset\": 0\n      }, null), _createVNode(\"circle\", {\n        \"class\": \"v-progress-circular__overlay\",\n        \"fill\": \"transparent\",\n        \"cx\": \"50%\",\n        \"cy\": \"50%\",\n        \"r\": MAGIC_RADIUS_CONSTANT,\n        \"stroke-width\": strokeWidth.value,\n        \"stroke-dasharray\": CIRCUMFERENCE,\n        \"stroke-dashoffset\": strokeDashOffset.value\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-progress-circular__content\"\n      }, [slots.default({\n        value: normalizedValue.value\n      })])]\n    });\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","useIntersectionObserver","useTextColor","useResizeObserver","computed","ref","toRef","watchEffect","convertToUnit","defineComponent","VProgressCircular","name","props","bgColor","String","color","indeterminate","Boolean","modelValue","type","Number","default","rotate","width","tag","setup","slots","_ref","MAGIC_RADIUS_CONSTANT","CIRCUMFERENCE","Math","PI","root","themeClasses","sizeClasses","sizeStyles","textColorClasses","textColorStyles","underlayColorClasses","underlayColorStyles","intersectionRef","isIntersecting","resizeRef","contentRect","normalizedValue","max","min","parseFloat","size","value","diameter","strokeWidth","strokeDashOffset","undefined","transform"],"sources":["../../../src/components/VProgressCircular/VProgressCircular.tsx"],"sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Composables\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useTextColor } from '@/composables/color'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, ref, toRef, watchEffect } from 'vue'\nimport { convertToUnit, defineComponent } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VProgressCircular = defineComponent({\n  name: 'VProgressCircular',\n\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String] as PropType<boolean | 'disable-shrink'>,\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'div' }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const MAGIC_RADIUS_CONSTANT = 20\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT\n\n    const root = ref<HTMLElement>()\n\n    const { themeClasses } = provideTheme(props)\n    const { sizeClasses, sizeStyles } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const { textColorClasses: underlayColorClasses, textColorStyles: underlayColorStyles } = useTextColor(toRef(props, 'bgColor'))\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n    const { resizeRef, contentRect } = useResizeObserver()\n\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))))\n    const width = computed(() => Number(props.width))\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value\n        ? Number(props.size)\n        : contentRect.value\n          ? contentRect.value.width\n          : Math.max(width.value, 32)\n    })\n    const diameter = computed(() => (MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value)) * 2)\n    const strokeWidth = computed(() => width.value / size.value * diameter.value)\n    const strokeDashOffset = computed(() => convertToUnit(((100 - normalizedValue.value) / 100) * CIRCUMFERENCE))\n\n    watchEffect(() => {\n      intersectionRef.value = root.value\n      resizeRef.value = root.value\n    })\n\n    return () => (\n      <props.tag\n        ref={ root }\n        class={[\n          'v-progress-circular',\n          {\n            'v-progress-circular--indeterminate': !!props.indeterminate,\n            'v-progress-circular--visible': isIntersecting.value,\n            'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink',\n          },\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          sizeStyles.value,\n          textColorStyles.value,\n        ]}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n      >\n        <svg\n          style={{\n            transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`,\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={ `0 0 ${diameter.value} ${diameter.value}` }\n        >\n          <circle\n            class={[\n              'v-progress-circular__underlay',\n              underlayColorClasses.value,\n            ]}\n            style={ underlayColorStyles.value }\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ 0 }\n          />\n\n          <circle\n            class=\"v-progress-circular__overlay\"\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ strokeDashOffset.value }\n          />\n        </svg>\n        { slots.default && (\n          <div class=\"v-progress-circular__content\">\n            { slots.default({ value: normalizedValue.value }) }\n          </div>\n        ) }\n      </props.tag>\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}